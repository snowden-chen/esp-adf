From df77dc9093b62ccc80ff7452e6ce1a38f0953661 Mon Sep 17 00:00:00 2001
From: donglianghao <donglianghao@espressif.com>
Date: Fri, 17 Jul 2020 20:27:48 +0800
Subject: [PATCH] idf_ota_patch

---
 components/esp_http_client/esp_http_client.c  | 20 ++++-
 .../esp_https_ota/include/esp_https_ota.h     |  4 +-
 components/esp_https_ota/src/esp_https_ota.c  | 90 ++++++-------------
 3 files changed, 47 insertions(+), 67 deletions(-)

diff --git a/components/esp_http_client/esp_http_client.c b/components/esp_http_client/esp_http_client.c
index 25c0d5d87..1fe37bc93 100644
--- a/components/esp_http_client/esp_http_client.c
+++ b/components/esp_http_client/esp_http_client.c
@@ -639,6 +639,24 @@ esp_err_t esp_http_client_set_redirection(esp_http_client_handle_t client)
         return ESP_ERR_INVALID_ARG;
     }
     ESP_LOGD(TAG, "Redirect to %s", client->location);
+    if (client->response->buffer->raw_len > 0) {
+        memset(client->response->buffer->raw_data, 0, client->response->buffer->raw_len);
+        client->response->buffer->raw_len = 0;
+    }
+    if (client->response->buffer->len > 0) {
+        memset(client->response->buffer->data, 0, client->response->buffer->len);
+        client->response->buffer->len = 0;
+    }
+    client->request->buffer->output_ptr = NULL;
+    if (client->request->buffer->raw_len > 0) {
+        memset(client->request->buffer->raw_data, 0, client->request->buffer->raw_len);
+        client->request->buffer->raw_len = 0;
+    }
+    if (client->request->buffer->len > 0) {
+        memset(client->request->buffer->data, 0, client->request->buffer->len);
+        client->request->buffer->len = 0;
+    }
+    client->request->buffer->output_ptr = NULL;
     return esp_http_client_set_url(client, client->location);
 }
 
@@ -854,7 +872,7 @@ int esp_http_client_read(esp_http_client_handle_t client, char *buffer, int len)
                 }
                 ESP_LOG_LEVEL(sev, TAG, "esp_transport_read returned:%d and errno:%d ", rlen, errno);
             }
-            return ridx;
+            return rlen;
         }
         res_buffer->output_ptr = buffer + ridx;
         http_parser_execute(client->parser, client->parser_settings, res_buffer->data, rlen);
diff --git a/components/esp_https_ota/include/esp_https_ota.h b/components/esp_https_ota/include/esp_https_ota.h
index fd69f27f8..231f24c93 100644
--- a/components/esp_https_ota/include/esp_https_ota.h
+++ b/components/esp_https_ota/include/esp_https_ota.h
@@ -15,7 +15,7 @@
 #pragma once
 
 #include <esp_http_client.h>
-#include <bootloader_common.h>
+#include <esp_ota_ops.h>
 
 #ifdef __cplusplus
 extern "C" {
@@ -86,7 +86,7 @@ esp_err_t esp_https_ota(const esp_http_client_config_t *config);
  *    - For other return codes, refer documentation in app_update component and esp_http_client 
  *      component in esp-idf.
  */
-esp_err_t esp_https_ota_begin(esp_https_ota_config_t *ota_config, esp_https_ota_handle_t *handle);
+esp_err_t esp_https_ota_begin(esp_https_ota_config_t *ota_config, esp_https_ota_handle_t *handle, size_t offset);
 
 /**
  * @brief    Read image data from HTTP stream and write it to OTA partition 
diff --git a/components/esp_https_ota/src/esp_https_ota.c b/components/esp_https_ota/src/esp_https_ota.c
index 4bab1dcdb..089a7be71 100644
--- a/components/esp_https_ota/src/esp_https_ota.c
+++ b/components/esp_https_ota/src/esp_https_ota.c
@@ -17,8 +17,6 @@
 #include <string.h>
 #include <esp_https_ota.h>
 #include <esp_log.h>
-#include <esp_ota_ops.h>
-#include <errno.h>
 
 #define IMAGE_HEADER_SIZE sizeof(esp_image_header_t) + sizeof(esp_image_segment_header_t) + sizeof(esp_app_desc_t) + 1
 #define DEFAULT_OTA_BUF_SIZE IMAGE_HEADER_SIZE
@@ -70,13 +68,8 @@ static esp_err_t _http_handle_response_code(esp_http_client_handle_t http_client
     }
     
     char upgrade_data_buf[DEFAULT_OTA_BUF_SIZE];
-    // process_again() returns true only in case of redirection.
     if (process_again(status_code)) {
         while (1) {
-            /*
-             *  In case of redirection, esp_http_client_read() is called
-             *  to clear the response buffer of http_client.
-             */
             int data_read = esp_http_client_read(http_client, upgrade_data_buf, DEFAULT_OTA_BUF_SIZE);
             if (data_read < 0) {
                 ESP_LOGE(TAG, "Error: SSL data read error");
@@ -92,21 +85,17 @@ static esp_err_t _http_handle_response_code(esp_http_client_handle_t http_client
 static esp_err_t _http_connect(esp_http_client_handle_t http_client)
 {
     esp_err_t err = ESP_FAIL;
-    int status_code, header_ret;
+    int status_code;
     do {
         err = esp_http_client_open(http_client, 0);
         if (err != ESP_OK) {
             ESP_LOGE(TAG, "Failed to open HTTP connection: %s", esp_err_to_name(err));
             return err;
         }
-        header_ret = esp_http_client_fetch_headers(http_client);
-        if (header_ret < 0) {
-            return header_ret;
-        }
+        esp_http_client_fetch_headers(http_client);
         status_code = esp_http_client_get_status_code(http_client);
-        err = _http_handle_response_code(http_client, status_code);
-        if (err != ESP_OK) {
-            return err;
+        if (_http_handle_response_code(http_client, status_code) != ESP_OK) {
+            return ESP_FAIL;
         }
     } while (process_again(status_code));
     return err;
@@ -134,7 +123,7 @@ static esp_err_t _ota_write(esp_https_ota_t *https_ota_handle, const void *buffe
     return err;
 }
 
-esp_err_t esp_https_ota_begin(esp_https_ota_config_t *ota_config, esp_https_ota_handle_t *handle)
+esp_err_t esp_https_ota_begin(esp_https_ota_config_t *ota_config, esp_https_ota_handle_t *handle, size_t offset)
 {
     esp_err_t err;
 
@@ -168,6 +157,12 @@ esp_err_t esp_https_ota_begin(esp_https_ota_config_t *ota_config, esp_https_ota_
         err = ESP_FAIL;
         goto failure;
     }
+    
+    if (offset > 0) {
+        char rang_header[32];
+        snprintf(rang_header, 32, "bytes=%d-", (int)offset);
+        esp_http_client_set_header(https_ota_handle->http_client, "Range", rang_header);
+    }
 
     err = _http_connect(https_ota_handle->http_client);
     if (err != ESP_OK) {
@@ -220,37 +215,19 @@ esp_err_t esp_https_ota_get_img_desc(esp_https_ota_handle_t https_ota_handle, es
         ESP_LOGE(TAG, "esp_https_ota_read_img_desc: Invalid state");
         return ESP_FAIL;
     }
-    /*
-     * `data_read_size` holds number of bytes needed to read complete header.
-     * `bytes_read` holds number of bytes read.
-     */
     int data_read_size = IMAGE_HEADER_SIZE;
-    int data_read = 0, bytes_read = 0;
-    /*
-     * while loop is added to download complete image headers, even if the headers
-     * are not sent in a single packet.
-     */
-    while (data_read_size > 0 && !esp_https_ota_is_complete_data_received(https_ota_handle)) {
-        data_read = esp_http_client_read(handle->http_client,
-                                          (handle->ota_upgrade_buf + bytes_read),
-                                          data_read_size);
-        /*
-         * As esp_http_client_read never returns negative error code, we rely on
-         * `errno` to check for underlying transport connectivity closure if any
-         */
-        if (errno == ENOTCONN || errno == ECONNRESET || errno == ECONNABORTED) {
-            ESP_LOGE(TAG, "Connection closed, errno = %d", errno);
-            break;
-        }
-        data_read_size -= data_read;
-        bytes_read += data_read;
+    int data_read = esp_http_client_read(handle->http_client,
+                                         handle->ota_upgrade_buf,
+                                         data_read_size);
+    if (data_read < 0) {
+        return ESP_FAIL;
     }
-    if (data_read_size > 0) {
-        ESP_LOGE(TAG, "Complete headers were not received");
+    if (data_read >= sizeof(esp_image_header_t) + sizeof(esp_image_segment_header_t) + sizeof(esp_app_desc_t)) {
+        memcpy(new_app_info, &handle->ota_upgrade_buf[sizeof(esp_image_header_t) + sizeof(esp_image_segment_header_t)], sizeof(esp_app_desc_t));
+        handle->binary_file_len += data_read;
+    } else {
         return ESP_FAIL;
     }
-    handle->binary_file_len = bytes_read;
-    memcpy(new_app_info, &handle->ota_upgrade_buf[sizeof(esp_image_header_t) + sizeof(esp_image_segment_header_t)], sizeof(esp_app_desc_t));
     return ESP_OK;                                
 }
 
@@ -288,25 +265,10 @@ esp_err_t esp_https_ota_perform(esp_https_ota_handle_t https_ota_handle)
                                              handle->ota_upgrade_buf,
                                              handle->ota_upgrade_buf_size);
             if (data_read == 0) {
-                /*
-                 *  esp_https_ota_is_complete_data_received is added to check whether
-                 *  complete image is received.
-                 */
-                bool is_recv_complete = esp_https_ota_is_complete_data_received(https_ota_handle);
-                /*
-                 * As esp_http_client_read never returns negative error code, we rely on
-                 * `errno` to check for underlying transport connectivity closure if any.
-                 * Incase the complete data has not been received but the server has sent
-                 * an ENOTCONN or ECONNRESET, failure is returned. We close with success
-                 * if complete data has been received.
-                 */
-                if ((errno == ENOTCONN || errno == ECONNRESET || errno == ECONNABORTED) && !is_recv_complete) {
-                    ESP_LOGE(TAG, "Connection closed, errno = %d", errno);
-                    return ESP_FAIL;
-                } else if (!is_recv_complete) {
-                    return ESP_ERR_HTTPS_OTA_IN_PROGRESS;
-                }
-                ESP_LOGI(TAG, "Connection closed");
+                ESP_LOGI(TAG, "Connection closed, all data received");
+            } else if (data_read < 0) {
+                ESP_LOGE(TAG, "Error: SSL data read error");
+                return ESP_FAIL;
             } else if (data_read > 0) {
                 return _ota_write(handle, (const void *)handle->ota_upgrade_buf, data_read);
             }
@@ -389,7 +351,7 @@ esp_err_t esp_https_ota(const esp_http_client_config_t *config)
     };
 
     esp_https_ota_handle_t https_ota_handle = NULL;
-    esp_err_t err = esp_https_ota_begin(&ota_config, &https_ota_handle);
+    esp_err_t err = esp_https_ota_begin(&ota_config, &https_ota_handle, 0);
     if (https_ota_handle == NULL) {
         return ESP_FAIL;
     }
@@ -411,4 +373,4 @@ esp_err_t esp_https_ota(const esp_http_client_config_t *config)
         return ota_finish_err;
     }
     return ESP_OK;
-}
+}
\ No newline at end of file
-- 
2.17.1

